//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace EZ_Travel.PushService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PushService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SubscribeMyPhone", ReplyAction="http://tempuri.org/IService1/SubscribeMyPhoneResponse")]
        System.IAsyncResult BeginSubscribeMyPhone(System.Guid phoneID, string channelURI, System.AsyncCallback callback, object asyncState);
        
        void EndSubscribeMyPhone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PushRawData", ReplyAction="http://tempuri.org/IService1/PushRawDataResponse")]
        System.IAsyncResult BeginPushRawData(string rawMessage, System.AsyncCallback callback, object asyncState);
        
        void EndPushRawData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PushToast", ReplyAction="http://tempuri.org/IService1/PushToastResponse")]
        System.IAsyncResult BeginPushToast(System.AsyncCallback callback, object asyncState);
        
        void EndPushToast(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PushTileUpdate", ReplyAction="http://tempuri.org/IService1/PushTileUpdateResponse")]
        System.IAsyncResult BeginPushTileUpdate(string tileTitle, int tileCount, string tileImageURI, System.AsyncCallback callback, object asyncState);
        
        void EndPushTileUpdate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EZ_Travel.PushService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EZ_Travel.PushService.IService1>, EZ_Travel.PushService.IService1 {
        
        private BeginOperationDelegate onBeginSubscribeMyPhoneDelegate;
        
        private EndOperationDelegate onEndSubscribeMyPhoneDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeMyPhoneCompletedDelegate;
        
        private BeginOperationDelegate onBeginPushRawDataDelegate;
        
        private EndOperationDelegate onEndPushRawDataDelegate;
        
        private System.Threading.SendOrPostCallback onPushRawDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginPushToastDelegate;
        
        private EndOperationDelegate onEndPushToastDelegate;
        
        private System.Threading.SendOrPostCallback onPushToastCompletedDelegate;
        
        private BeginOperationDelegate onBeginPushTileUpdateDelegate;
        
        private EndOperationDelegate onEndPushTileUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onPushTileUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeMyPhoneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushRawDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushToastCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushTileUpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EZ_Travel.PushService.IService1.BeginSubscribeMyPhone(System.Guid phoneID, string channelURI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribeMyPhone(phoneID, channelURI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void EZ_Travel.PushService.IService1.EndSubscribeMyPhone(System.IAsyncResult result) {
            base.Channel.EndSubscribeMyPhone(result);
        }
        
        private System.IAsyncResult OnBeginSubscribeMyPhone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid phoneID = ((System.Guid)(inValues[0]));
            string channelURI = ((string)(inValues[1]));
            return ((EZ_Travel.PushService.IService1)(this)).BeginSubscribeMyPhone(phoneID, channelURI, callback, asyncState);
        }
        
        private object[] OnEndSubscribeMyPhone(System.IAsyncResult result) {
            ((EZ_Travel.PushService.IService1)(this)).EndSubscribeMyPhone(result);
            return null;
        }
        
        private void OnSubscribeMyPhoneCompleted(object state) {
            if ((this.SubscribeMyPhoneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeMyPhoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeMyPhoneAsync(System.Guid phoneID, string channelURI) {
            this.SubscribeMyPhoneAsync(phoneID, channelURI, null);
        }
        
        public void SubscribeMyPhoneAsync(System.Guid phoneID, string channelURI, object userState) {
            if ((this.onBeginSubscribeMyPhoneDelegate == null)) {
                this.onBeginSubscribeMyPhoneDelegate = new BeginOperationDelegate(this.OnBeginSubscribeMyPhone);
            }
            if ((this.onEndSubscribeMyPhoneDelegate == null)) {
                this.onEndSubscribeMyPhoneDelegate = new EndOperationDelegate(this.OnEndSubscribeMyPhone);
            }
            if ((this.onSubscribeMyPhoneCompletedDelegate == null)) {
                this.onSubscribeMyPhoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeMyPhoneCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeMyPhoneDelegate, new object[] {
                        phoneID,
                        channelURI}, this.onEndSubscribeMyPhoneDelegate, this.onSubscribeMyPhoneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EZ_Travel.PushService.IService1.BeginPushRawData(string rawMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPushRawData(rawMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void EZ_Travel.PushService.IService1.EndPushRawData(System.IAsyncResult result) {
            base.Channel.EndPushRawData(result);
        }
        
        private System.IAsyncResult OnBeginPushRawData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rawMessage = ((string)(inValues[0]));
            return ((EZ_Travel.PushService.IService1)(this)).BeginPushRawData(rawMessage, callback, asyncState);
        }
        
        private object[] OnEndPushRawData(System.IAsyncResult result) {
            ((EZ_Travel.PushService.IService1)(this)).EndPushRawData(result);
            return null;
        }
        
        private void OnPushRawDataCompleted(object state) {
            if ((this.PushRawDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PushRawDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PushRawDataAsync(string rawMessage) {
            this.PushRawDataAsync(rawMessage, null);
        }
        
        public void PushRawDataAsync(string rawMessage, object userState) {
            if ((this.onBeginPushRawDataDelegate == null)) {
                this.onBeginPushRawDataDelegate = new BeginOperationDelegate(this.OnBeginPushRawData);
            }
            if ((this.onEndPushRawDataDelegate == null)) {
                this.onEndPushRawDataDelegate = new EndOperationDelegate(this.OnEndPushRawData);
            }
            if ((this.onPushRawDataCompletedDelegate == null)) {
                this.onPushRawDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushRawDataCompleted);
            }
            base.InvokeAsync(this.onBeginPushRawDataDelegate, new object[] {
                        rawMessage}, this.onEndPushRawDataDelegate, this.onPushRawDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EZ_Travel.PushService.IService1.BeginPushToast(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPushToast(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void EZ_Travel.PushService.IService1.EndPushToast(System.IAsyncResult result) {
            base.Channel.EndPushToast(result);
        }
        
        private System.IAsyncResult OnBeginPushToast(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EZ_Travel.PushService.IService1)(this)).BeginPushToast(callback, asyncState);
        }
        
        private object[] OnEndPushToast(System.IAsyncResult result) {
            ((EZ_Travel.PushService.IService1)(this)).EndPushToast(result);
            return null;
        }
        
        private void OnPushToastCompleted(object state) {
            if ((this.PushToastCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PushToastCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PushToastAsync() {
            this.PushToastAsync(null);
        }
        
        public void PushToastAsync(object userState) {
            if ((this.onBeginPushToastDelegate == null)) {
                this.onBeginPushToastDelegate = new BeginOperationDelegate(this.OnBeginPushToast);
            }
            if ((this.onEndPushToastDelegate == null)) {
                this.onEndPushToastDelegate = new EndOperationDelegate(this.OnEndPushToast);
            }
            if ((this.onPushToastCompletedDelegate == null)) {
                this.onPushToastCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushToastCompleted);
            }
            base.InvokeAsync(this.onBeginPushToastDelegate, null, this.onEndPushToastDelegate, this.onPushToastCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EZ_Travel.PushService.IService1.BeginPushTileUpdate(string tileTitle, int tileCount, string tileImageURI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPushTileUpdate(tileTitle, tileCount, tileImageURI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void EZ_Travel.PushService.IService1.EndPushTileUpdate(System.IAsyncResult result) {
            base.Channel.EndPushTileUpdate(result);
        }
        
        private System.IAsyncResult OnBeginPushTileUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tileTitle = ((string)(inValues[0]));
            int tileCount = ((int)(inValues[1]));
            string tileImageURI = ((string)(inValues[2]));
            return ((EZ_Travel.PushService.IService1)(this)).BeginPushTileUpdate(tileTitle, tileCount, tileImageURI, callback, asyncState);
        }
        
        private object[] OnEndPushTileUpdate(System.IAsyncResult result) {
            ((EZ_Travel.PushService.IService1)(this)).EndPushTileUpdate(result);
            return null;
        }
        
        private void OnPushTileUpdateCompleted(object state) {
            if ((this.PushTileUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PushTileUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PushTileUpdateAsync(string tileTitle, int tileCount, string tileImageURI) {
            this.PushTileUpdateAsync(tileTitle, tileCount, tileImageURI, null);
        }
        
        public void PushTileUpdateAsync(string tileTitle, int tileCount, string tileImageURI, object userState) {
            if ((this.onBeginPushTileUpdateDelegate == null)) {
                this.onBeginPushTileUpdateDelegate = new BeginOperationDelegate(this.OnBeginPushTileUpdate);
            }
            if ((this.onEndPushTileUpdateDelegate == null)) {
                this.onEndPushTileUpdateDelegate = new EndOperationDelegate(this.OnEndPushTileUpdate);
            }
            if ((this.onPushTileUpdateCompletedDelegate == null)) {
                this.onPushTileUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushTileUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginPushTileUpdateDelegate, new object[] {
                        tileTitle,
                        tileCount,
                        tileImageURI}, this.onEndPushTileUpdateDelegate, this.onPushTileUpdateCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override EZ_Travel.PushService.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<EZ_Travel.PushService.IService1>, EZ_Travel.PushService.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<EZ_Travel.PushService.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSubscribeMyPhone(System.Guid phoneID, string channelURI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = phoneID;
                _args[1] = channelURI;
                System.IAsyncResult _result = base.BeginInvoke("SubscribeMyPhone", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSubscribeMyPhone(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SubscribeMyPhone", _args, result);
            }
            
            public System.IAsyncResult BeginPushRawData(string rawMessage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rawMessage;
                System.IAsyncResult _result = base.BeginInvoke("PushRawData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPushRawData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PushRawData", _args, result);
            }
            
            public System.IAsyncResult BeginPushToast(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PushToast", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPushToast(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PushToast", _args, result);
            }
            
            public System.IAsyncResult BeginPushTileUpdate(string tileTitle, int tileCount, string tileImageURI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = tileTitle;
                _args[1] = tileCount;
                _args[2] = tileImageURI;
                System.IAsyncResult _result = base.BeginInvoke("PushTileUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPushTileUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PushTileUpdate", _args, result);
            }
        }
    }
}
